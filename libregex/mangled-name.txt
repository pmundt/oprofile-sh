# test for stl beautifier, do op_regex_test < mangled-name.txt
# line go by couple mangled name then expected name after run, line
# starting by # and blank line are ignored. The test must output nothing if
# successfull

# before removing tests think it take time to generate them.

# g++ 2.95 stl mangled name

basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >
string

prefix_basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >
prefix_basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >

vector<basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >, allocator<basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> > > >
vector<string>

map<int, image_name, less<int>, allocator<image_name> >
map<int, image_name>

map<basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >, image_name, less<basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> > >, allocator<image_name> >
map<string, image_name>

multimap<int, long, less<int>, allocator<long> >
multimap<int, long>

prefix_multimap<int, long, less<int>, allocator<long> >
prefix_multimap<int, long, less<int>, allocator<long> >

bitset<33, unsigned long>
bitset<33>

istream_iterator<char, int>
istream_iterator<char>

ostream_iterator<char, int>
ostream_iterator<char>

# shared between all supported gcc version
deque<int, allocator<int>, 0>
deque<int>

std::deque<int, std::allocator<int>, 0>
deque<int>

prefix_deque<int, allocator<int>, 0>
prefix_deque<int, allocator<int>, 0>

list<int, allocator<int> >
list<int>

list<op_bfd_symbol, allocator<op_bfd_symbol> >
list<op_bfd_symbol>

prefix_list<int, allocator<int> >
prefix_list<int, allocator<int> >

std::list<int, std::allocator<int> >
list<int>

queue<int, deque<int, allocator<int>, 0> >
queue<int>

prefix_queue<int, deque<int, allocator<int>, 0> >
prefix_queue<int, deque<int> >

std::queue<int, std::deque<int, allocator<int>, 0> >
queue<int>

# strictly speaking 3rd parameters is less<ContainerType::value_type>
priority_queue<int, vector<int, allocator<int> >, less<int> >
priority_queue<int>

prefix_priority_queue<int, vector<int, allocator<int> >, less<int> >
prefix_priority_queue<int, vector<int>, less<int> >

std::priority_queue<int, std::vector<int, std::allocator<int> >, std::less<int> >
priority_queue<int>

vector<int, allocator<int> >
vector<int>

vector<bool, allocator<bool> >
vector<bool>

vector<block1::block2, allocator<block1::block2> >
vector<block1::block2>

stack<int, deque<int, allocator<int>, 0> >
stack<int>

prefix_stack<int, deque<int, allocator<int>, 0> >
prefix_stack<int, deque<int> >

std::stack<int, std::deque<int, std::allocator<int>, 0> >
stack<int>

# test complex typename, we don't support more than one level of nesting
vector<list<int, allocator<int> >, allocator<list<int, allocator<int> > > >
vector<list<int>>

std::vector<std::list<int, std::allocator<int> >, std::allocator<list<int, std::allocator<int> > > >
vector<list<int>>

set<int, less<int>, allocator<int> >
set<int>

prefix_set<int, less<int>, allocator<int> >
prefix_set<int, less<int>, allocator<int> >

prefix_set<int, less<int>, allocator<int> >
prefix_set<int, less<int>, allocator<int> >

multiset<int, less<int>, allocator<int> >
multiset<int>

# test than pointer and reference to pointer are handled
vector<int *, allocator<int *> >
vector<int *>

# gcc 3.2
std::basic_string<char, std::char_traits<char>, std::allocator<char> >
string

std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >
wstring

std::map<int, long, std::less<int>, std::allocator<std::pair<int const, long> > >
map<int, long>

std::multimap<int, long, std::less<int>, std::allocator<std::pair<int const, long> > >
multimap<int, long>

# parameter is size_t on x86 it's an unsigned
bitset<(unsigned)33>
bitset<33>

# 3rd is ptrdiff_t it's an int on x86
std::iterator<std::input_iterator_tag, int, int, int*, int&>
iterator<input_iterator_tag, int>

std::iterator<std::output_iterator_tag, int, int, int*, int&>
iterator<output_iterator_tag, int>

std::iterator<std::forward_iterator_tag, int, int, int*, int&>
iterator<forward_iterator_tag, int>

std::iterator<std::bidirectional_iterator_tag, int, int, int*, int&>
iterator<bidirectional_iterator_tag, int>

std::iterator<std::random_iterator_tag, int, int, int*, int&>
iterator<random_iterator_tag, int>

# 4th parms is ptrdiff_t
std::istream_iterator<long, char, std::char_traits<char>, int>
istream_iterator<long>

std::ostream_iterator<long, char, std::char_traits<char>, int>
ostream_iterator<long>

# simple enough, it's just <iosfwd>
std::basic_ios<int, std::char_traits<int> >
basic_ios<int>

std::basic_streambuf<int, std::char_traits<int> >
basic_streambuf<int>

std::basic_istream<int, std::char_traits<int> >
basic_istream<int>

std::basic_ostream<int, std::char_traits<int> >
basic_ostream<int>

std::basic_iostream<int, std::char_traits<int> >
basic_iostream<int>

std::basic_filebuf<int, std::char_traits<int> >
basic_filebuf<int>

std::basic_ifstream<int, std::char_traits<int> >
basic_ifstream<int>

std::basic_ofstream<int, std::char_traits<int> >
basic_ofstream<int>

std::basic_fstream<int, std::char_traits<int> >
basic_fstream<int>

std::istreambuf_iterator<long, std::char_traits<long> >
istreambuf_iterator<long>

std::ostreambuf_iterator<long, std::char_traits<long> >
ostreambuf_iterator<long>

std::basic_stringbuf<long, std::char_traits<long>, std::allocator<long> >
basic_stringbuf<long>

std::basic_istringstream<long, std::char_traits<long>, std::allocator<long> >
basic_istringstream<long>

std::basic_ostringstream<long, std::char_traits<long>, std::allocator<long> >
basic_ostringstream<long>

std::basic_stringstream<long, std::char_traits<long>, std::allocator<long> >
basic_stringstream<long>

# now all the above intantiated with char and wchar_t which fallback to
# standardised typedef

std::basic_ios<char, std::char_traits<char> >
ios
std::basic_ios<wchar_t, std::char_traits<wchar_t> >
wios

std::basic_streambuf<char, std::char_traits<char> >
streambuf
std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >
wstreambuf

std::basic_istream<char, std::char_traits<char> >
istream
std::basic_istream<wchar_t, std::char_traits<wchar_t> >
wistream

std::basic_ostream<char, std::char_traits<char> >
ostream
std::basic_ostream<wchar_t, std::char_traits<wchar_t> >
wostream

std::basic_iostream<char, std::char_traits<char> >
iostream
std::basic_iostream<wchar_t, std::char_traits<wchar_t> >
wiostream

std::basic_filebuf<char, std::char_traits<char> >
filebuf
std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >
wfilebuf

std::basic_ifstream<char, std::char_traits<char> >
ifstream
std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >
wifstream

std::basic_ofstream<char, std::char_traits<char> >
ofstream
std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >
wofstream

std::basic_fstream<char, std::char_traits<char> >
fstream
std::basic_fstream<wchar_t, std::char_traits<wchar_t> >
wfstream

# istreambuf_iterator and ostreambuf_iterator are not typedefed, let them here
# need more checking in DR, FIXME
#std::istreambuf_iterator<char, std::char_traits<char> >
#istreambuf_iterator<long>
#std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >
#istreambuf_iterator<long>

#std::ostreambuf_iterator<char, std::char_traits<char> >
#ostreambuf_iterator<long>
#std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >
#ostreambuf_iterator<long>

std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >
stringbuf
std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >
wstringbuf

std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >
istringstream
std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >
wistringstream

std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >
ostringstream
std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >
wostringstream

std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >
stringstream
std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >
wstringstream

# these two are also in iosfw, manemly 
# typedef fpos<char_traits<char>::state_type>  streampos;
# typedef fpos<char_traits<wchar_t>::state_type> wstreampos;
# twice decay to fpos<__mbstate>, we choosed to translate to streampos
std::fpos<__mbstate_t>
streampos

# locale
std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >
num_put<char>
std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >
num_put<wchar_t>
std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >
num_get<char>
std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >
num_get<wchar_t>

std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >
time_put<char>
std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >
time_put<wchar_t>
std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >
time_get<char>
std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >
time_get<wchar_t>

std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >
money_put<char>
std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >
money_put<wchar_t>
std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >
money_get<char>
std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >
money_get<wchar_t>

std::moneypunct<char, (bool)0>
moneypunct<char>
std::moneypunct<wchar_t, (bool)0>
moneypunct<wchar_t>
std::moneypunct_byname<char, (bool)0>
moneypunct_byname<char>
std::moneypunct_byname<wchar_t, (bool)0>
moneypunct_byname<wchar_t>
