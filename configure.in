#   Autoconf script for oprofile
#
#   Copyright 1999 Olaf Titz <olaf@bigred.inka.de>
#   Adapted for oprofile
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version
#   2 of the License, or (at your option) any later version.
#

AC_REVISION($Id$)
AC_PREREQ(2.13)
AC_INIT(libop/op_config.h)

AC_CONFIG_HEADER(config.h)

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
PACKAGE=oprofile
VERSION=0.3cvs

dnl for the man page
DATE="`date '+%a %d %B %Y'`"
AC_SUBST(DATE)
 
dnl -- local macros -- 
 
dnl AX_MSG_RESULT_YN(a)
dnl results "yes" iff a==1, "no" else
AC_DEFUN(AX_MSG_RESULT_YN, [x=no
test "x$1" = "x1" && x=yes
AC_MSG_RESULT($x)])

dnl AX_COMPILE_OPTION(option, action-if-found, action-if-not-found)
dnl see if autoconf.h defines the option
AC_DEFUN(AX_COMPILE_OPTION, [
SAVE_CFLAGS=$CFLAGS
CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__"
AC_TRY_COMPILE( [#include <linux/config.h>],
[
#ifndef $1
break_me_hard(\\\);
#endif
],[$2],[$3],)
CFLAGS=$SAVE_CFLAGS
])

# FIXME - fucking autoconf ! how do I override the cached value ??? 
AC_ARG_WITH(cc,    [  --with-cc=<kgcc>             C compiler used to compiler kernel], CC=$withval)
AC_SUBST(CC)

AC_PROG_CC
test "$GCC" || AC_ERROR(You would not have much luck compiling kernel code with non-gcc...)
AC_PROG_CPP
AC_PROG_CXX
AC_CHECK_PROG(LD,ld,ld,)
test "$LD" || AC_ERROR(ld not found)

dnl checking for gcc 2.91
AC_MSG_CHECKING(for gcc 2.91)
AC_SUBST(GCC_2_91)
AC_TRY_COMPILE( 
  [],
  [
  #if __GNUC__ == 2 && __GNUC_MINOR__ == 91
  break_me_hard(\\\);
  #endif
  ], AC_MSG_RESULT("no"); GCC_2_91=no, AC_MSG_RESULT("yes"); GCC_2_91=yes)

dnl  --- Find the Linux kernel, at least the headers ---
 
AC_SUBST(KSRC)
KSRC=/lib/modules/`uname -r`/build
AC_ARG_WITH(linux, [  --with-linux=dir             Path to Linux source tree], KSRC=$withval) 
KINC=$KSRC/include
AC_SUBST(KINC)
 
if test ! -f $KINC/linux/autoconf.h; then
  AC_MSG_ERROR(no suitably configured kernel include tree found)
fi

dnl  --- Get Linux kernel version and compile parameters ---

AC_SUBST(KVERS)
AC_MSG_CHECKING(for kernel version)
dnl it's like this to handle mandrake's fubar version.h - bug #471448
eval KVERS=`gcc -I$KINC -E -dM $KINC/linux/version.h | grep -w UTS_RELEASE | awk '{print $3}'`
AC_MSG_RESULT($KVERS)
case "$KVERS" in
2.2.*|2.4.*|2.5.*) ;;
*) AC_MSG_ERROR(Unsupported kernel version)
esac

dnl Check for the minimal kernel version supported
AC_MSG_CHECKING(kernel version)
SAVE_CFLAGS=$CFLAGS
CFLAGS="$BKCFLAGS -I$KINC -D__KERNEL__ -Werror"
AC_TRY_COMPILE( 
  [
  #include <linux/version.h>
  #include <linux/config.h>
  ],
  [
  #if LINUX_VERSION_CODE <= KERNEL_VERSION(2,2,10)
  break_me_hard(\\\);
  #endif
  ], AC_MSG_RESULT("ok"), AC_MSG_ERROR("check html documentation install section"))
CFLAGS=$SAVE_CFLAGS

AC_MSG_CHECKING("whether $CC accepts -mpreferred-stack-boundary=2")
SAVE_CFLAGS=$CFLAGS
CFLAGS="-mpreferred-stack-boundary=2 $CFLAGS"
AC_TRY_COMPILE(,,AC_MSG_RESULT("yes");BKCFLAGS="-mpreferred-stack-boundary=2 $BKCFLAGS",AC_MSG_RESULT("no"))
CFLAGS=$SAVE_CFLAGS

# FIXME: use config.h for the -D things ... 
AC_MSG_CHECKING("whether malloc attribute is understood")
SAVE_CFLAGS=$CFLAGS
CFLAGS="-Werror $CFLAGS"
AC_TRY_COMPILE(,[
void monkey() __attribute__((malloc));
],AC_MSG_RESULT("yes"); CFLAGS="$SAVE_CFLAGS -DMALLOC_OK", AC_MSG_RESULT("no"); CFLAGS="$SAVE_CFLAGS")
CFLAGS=$SAVE_CFLAGS 

AC_MSG_CHECKING("whether __builtin_expect is understood")
SAVE_CFLAGS=$CFLAGS
CFLAGS="-Werror $CFLAGS"
AC_TRY_LINK(,[
int i;
if (__builtin_expect(i, 0)) { }
],AC_MSG_RESULT("yes"); BKCFLAGS="$BKCFLAGS -DEXPECT_OK", AC_MSG_RESULT("no");)
CFLAGS=$SAVE_CFLAGS 
 
AC_MSG_CHECKING(for rtc_lock)
gcc -I$KINC -E $KINC/linux/mc146818rtc.h | grep rtc_lock >/dev/null
if test "$?" -eq 0; then
  AC_MSG_RESULT(yes); BKCFLAGS="$BKCFLAGS -DRTC_LOCK";
else
  AC_MSG_RESULT(no);
fi
 
dnl Check for tgid
AC_MSG_CHECKING(task_struct.tgid)
SAVE_CFLAGS=$CFLAGS
CFLAGS="$BKCFLAGS -I$KINC -D__KERNEL__ -Werror"
AC_TRY_COMPILE(
  [
  #include <linux/config.h>
  #include <linux/sched.h>
  ],
  [
  int main() { task_struct t; t->tgid = 4; return 0; }
  ], AC_MSG_RESULT("yes") BKCFLAGS="-DTGID $BKCFLAGS", AC_MSG_RESULT("no"))
CFLAGS=$SAVE_CFLAGS

AC_MSG_CHECKING(for hard_get_current())
HARD_GET_CURRENT=`gcc -I$KINC -E $KINC/asm/current.h | grep hard_get_current`
if test -z "$HARD_GET_CURRENT"; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
  # hard_get_current() can't work for us...
  AC_MSG_ERROR(This kernel version is unsupported. Check oprofile bug tracker for more information.)
fi

arch="unknown"
AC_MSG_CHECKING(for x86 architecture)
AX_COMPILE_OPTION(CONFIG_X86, x86=1, x86=0)
AX_COMPILE_OPTION(CONFIG_X86_WP_WORKS_OK, x86=1, x86=$x86)
AX_MSG_RESULT_YN($x86)
test "$x86" = 1 && arch="x86"
test "$arch" = "unknown" && AC_MSG_ERROR(Unsupported architecture)
rm -f module/arch && ln -s "$arch" module/arch

AC_MSG_CHECKING(for SMP)
AX_COMPILE_OPTION(CONFIG_SMP,smp=1,smp=0)
AX_MSG_RESULT_YN($smp)

AC_MSG_CHECKING(for versioned modules)
mv=0
AX_COMPILE_OPTION(CONFIG_MODVERSIONS,mv=1,mv=0)
AX_MSG_RESULT_YN($mv)
MODVERSIONS=""
test "$mv" = 1 && MODVERSIONS="-DMODVERSIONS -include $KINC/linux/modversions.h"
AC_SUBST(MODVERSIONS)

dnl for now we do not support PREEMPT patch
AC_MSG_CHECKING(for preempt patch)
AX_COMPILE_OPTION(CONFIG_PREEMPT,preempt=1,preempt=0)
AX_MSG_RESULT_YN($preempt)
test "$preempt" = 0 || AC_MSG_ERROR(unsupported kernel configuration : CONFIG_PREEMPT)

dnl linux 2.2 need -D__SMP__, preferable to pass as compile option, so we
dnl include <linux/smp.h> without worrying to include the compat file first
if test "$smp" = 1; then
  AC_MSG_CHECKING(for -D__SMP__)
  dnl look like a AX_CHECK_LINUX_VERSION(x,y,z);
  SAVE_CFLAGS=$CFLAGS
  CFLAGS="$BKCFLAGS -I$KINC -O2 -D__KERNEL__ -Werror -Wall"
  AC_TRY_COMPILE( 
    [ #include <linux/version.h> ],
    [ 
      #if LINUX_VERSION_CODE < LINUX_VERSION(2,4,0)
	break_me_hard(\\\);
      #endif
    ],
    AC_MSG_RESULT("no"),
    AC_MSG_RESULT("yes");BKCFLAGS="-D__SMP__ $BKCFLAGS")
  CFLAGS=$SAVE_CFLAGS
fi

dnl in 2.2 only one object file must be compiled w/o __NO_VERSION__ look at
dnl further comment in module/Makefile.in. Note than treating this in compat.h
dnl means than compat.h must be include before any #include <>, for now treat
dnl on cmd line FIXME
AC_MSG_CHECKING(for __NO_VERSION__)
if grep __NO_VERSION__ $KSRC/include/linux/module.h >/dev/null; then
  AC_MSG_RESULT("yes")
  NO_MODULE_VERSION="-D__NO_VERSION__"
else
  AC_MSG_RESULT("no")
fi
AC_SUBST(NO_MODULE_VERSION)

AC_SUBST(KINC)
AC_SUBST(BKCFLAGS)

MODINSTALLDIR=/lib/modules/$KVERS
 
AC_ARG_WITH(module-dir,
[  --with-module-dir=dir        Path to module installation directory], MODINSTALLDIR=$withval)
AC_SUBST(MODINSTALLDIR)

dnl --- user space configuration ---

# we are weak, so do not support separate build dir
topdir=`pwd`
AC_SUBST(topdir)
 
AC_ARG_WITH(extra-includes,
[  --with-extra-includes=DIR    add extra include paths],
  use_extra_includes="$withval",
  use_extra_includes=NO
)
if test -n "$use_extra_includes" && \
        test "$use_extra_includes" != "NO"; then
  ac_save_ifs=$IFS
  IFS=':'
  for dir in $use_extra_includes; do
    extra_includes="$extra_includes -I$dir"
  done
  IFS=$ac_save_ifs
  CPPFLAGS="$CPPFLAGS $extra_includes"
fi

AC_ARG_WITH(extra-libs,
[  --with-extra-libs=DIR        add extra library paths],
  use_extra_libs=$withval,
  use_extra_libs=NO
)
if test -n "$use_extra_libs" && \
        test "$use_extra_libs" != "NO"; then
   ac_save_ifs=$IFS
   IFS=':'
   for dir in $use_extra_libs; do
     extra_libraries="$extra_libraries -L$dir"
   done
   IFS=$ac_save_ifs
fi

AC_SUBST(extra_includes)
AC_SUBST(extra_libraries)

AC_CHECK_LIB(popt, poptGetContext,, AC_MSG_ERROR(popt library not found))
AC_CHECK_LIB(dl, dlopen,, AC_MSG_ERROR(dl library not found))
AC_CHECK_LIB(iberty, cplus_demangle,, AC_MSG_ERROR(liberty library not found))
AC_CHECK_LIB(bfd, bfd_openr,, AC_MSG_ERROR(bfd library not found))

# C++ tests
 
AC_LANG_CPLUSPLUS

AC_MSG_CHECKING("popt prototype")
SAVE_CXXFLAGS=$CXXFLAGS
CXXFLAGS="-Werror $CXXFLAGS"
AC_TRY_COMPILE([#include <popt.h>],
[
int c; char **v;
poptGetContext(0, c, v, 0, 0);
],
AC_MSG_RESULT([takes char **]); CXXFLAGS="$SAVE_CXXFLAGS";,
AC_MSG_RESULT([takes const char **]); CFLAGS="$CFLAGS -DCONST_POPT"; CXXFLAGS="$SAVE_CXXFLAGS -DCONST_POPT")

AC_MSG_CHECKING("whether to use included sstream")
AC_TRY_COMPILE([#include <sstream>], [], 
AC_MSG_RESULT([no]);,
AC_MSG_RESULT([yes]); CXXINCLUDES="$CXXINCLUDES -I../include")
AC_SUBST(CXXINCLUDES)

dnl some distro have a libiberty.a but does not have a libiberty.h
AC_CHECK_HEADERS(libiberty.h)
AC_CHECK_FUNCS(xcalloc)

dnl bfd.h pre 1998 check only for gnu 2.xx series, so gcc 3.0 can't compile it
AC_MSG_CHECKING("whether bfd define bool")
AC_TRY_COMPILE([#include <bfd.h>], [], 
AC_MSG_RESULT([no]);,
AC_MSG_RESULT([yes]); BFD_CXXFLAGS="-DTRUE_FALSE_ALREADY_DEFINED")
AC_SUBST(BFD_CXXFLAGS)

AC_PATH_XTRA 
LIBS="$X_PRE_LIBS $LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
QT2_DO_IT_ALL
 
# do NOT put tests here, they will fail in the case X is not installed !
 
AC_OUTPUT(make.common \
	Makefile \
	libutil/Makefile \
	libutil++/Makefile \
	libop/Makefile \
	libop++/Makefile \
	libopt++/Makefile \
	libdb/Makefile \
	module/Makefile \
	dae/Makefile \
	utils/Makefile \
	doc/Makefile \
	doc/oprofile.1 \
	pp/Makefile \
	gui/Makefile \
	gui/ui/Makefile \
	oprof_report/Makefile \
	oprof_report/ui/Makefile \
	module/arch/Makefile \
	version.h)

if test "$have_qt2" != "yes"; then
	echo "Warning: Qt2 not found; no GUI will be built"
fi
