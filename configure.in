#   Autoconf script for oprofile
#
#   Copyright 1999 Olaf Titz <olaf@bigred.inka.de>
#   Adapted for oprofile
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version
#   2 of the License, or (at your option) any later version.
#

AC_PREREQ(2.13)

AC_INIT(libop/op_config.h)
AM_INIT_AUTOMAKE(oprofile, 0.6cvs)
AM_CONFIG_HEADER(config.h)

AC_PROG_RANLIB

dnl for the man page
DATE="`date '+%a %d %B %Y'`"
AC_SUBST(DATE)
 
dnl needed for module build
OPROFILE_DIR=`pwd`
AC_SUBST(OPROFILE_DIR)
 
dnl -- local macros -- 
 
dnl AX_MSG_RESULT_YN(a)
dnl results "yes" iff a==1, "no" else
AC_DEFUN(AX_MSG_RESULT_YN, [x=no
test "x$1" = "x1" && x=yes
AC_MSG_RESULT($x)])

dnl AX_COMPILE_OPTION(option, action-if-found, action-if-not-found)
dnl see if autoconf.h defines the option
AC_DEFUN(AX_COMPILE_OPTION, [
SAVE_CFLAGS=$CFLAGS
CFLAGS="-I$KINC -O2 -D__KERNEL__"
AC_TRY_COMPILE( [#include <linux/config.h>],
[
#ifndef $1
break_me_hard(\\\);
#endif
],[$2],[$3],)
CFLAGS=$SAVE_CFLAGS
])

dnl AX_KERNEL_VERSION(major, minor, level, comparison, action-if-true, action-if-false)
AC_DEFUN(AX_KERNEL_VERSION, [
SAVE_CFLAGS=$CFLAGS
CFLAGS="-I$KINC -D__KERNEL__ -Werror"
AC_TRY_COMPILE( 
  [
  #include <linux/version.h>
  #include <linux/config.h>
  ],
  [
  #if LINUX_VERSION_CODE $4 KERNEL_VERSION($1, $2, $3)
  break_me_hard(\\\);
  #endif
  ],
[$5],[$6],)
CFLAGS=$SAVE_CFLAGS
])

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_CHECK_PROG(LD,ld,ld,)
test "$LD" || AC_ERROR(ld not found)

AC_MSG_CHECKING([for kernel OProfile support])
AC_ARG_WITH(kernel-support, [  --with-kernel-support        Select if using CONFIG_OPROFILE],
if test "$withval" = "yes"; then
	OPROFILE_25=yes
fi
) 

if test "$OPROFILE_25" != "yes"; then
	dnl  --- Find the Linux kernel, at least the headers ---
 
	AC_SUBST(KSRC)
	KSRC=/lib/modules/`uname -r`/build
	AC_ARG_WITH(linux, [  --with-linux=dir             Path to Linux source tree], KSRC=$withval) 
	KINC=$KSRC/include
	AC_SUBST(KINC)

	AX_COMPILE_OPTION(CONFIG_OPROFILE, OPROFILE_25=yes, OPROFILE_25=no)
	AX_COMPILE_OPTION(CONFIG_OPROFILE_MODULE, OPROFILE_25=yes, OPROFILE_25=$OPROFILE_25)
fi
AC_MSG_RESULT($OPROFILE_25)

AM_CONDITIONAL(kernel_support, test $OPROFILE_25 = yes)
 
if test "$OPROFILE_25" = "no"; then
	if test ! -f $KINC/linux/autoconf.h; then
	  AC_MSG_ERROR([no suitably configured kernel include tree found])
	fi

	dnl  --- Get Linux kernel version and compile parameters ---

	AC_SUBST(KVERS)
	AC_MSG_CHECKING([for kernel version])
	dnl it's like this to handle mandrake's fubar version.h - bug #471448
	eval KVERS=`gcc -I$KINC -E -dM $KINC/linux/version.h | grep -w UTS_RELEASE | awk '{print $3}'`
	AC_MSG_RESULT([$KVERS])
	case "$KVERS" in
	2.2.*|2.4.*) ;;
	*) AC_MSG_ERROR([Unsupported kernel version])
	esac

	dnl Check for the minimal kernel version supported
	AC_MSG_CHECKING([kernel version])
	AX_KERNEL_VERSION(2, 2, 10, <=, AC_MSG_RESULT([ok]), AC_MSG_ERROR([check html documentation install section]))

	dnl linux/spinlock.h added at some point in past
	AC_MSG_CHECKING([for $KINC/linux/spinlock.h])
	if test -f $KINC/linux/spinlock.h; then
	  EXTRA_CFLAGS_MODULE="$EXTRA_CFLAGS_MODULE -DHAVE_LINUX_SPINLOCK_HEADER"
	  AC_MSG_RESULT([yes])
	else
	  AC_MSG_RESULT([no])
	fi

	AC_SUBST(EXTRA_CFLAGS_MODULE)

	AC_MSG_CHECKING([for rtc_lock])
	gcc -I$KINC -E $KINC/linux/mc146818rtc.h | grep rtc_lock >/dev/null
	if test "$?" -eq 0; then
	  AC_MSG_RESULT([yes]); EXTRA_CFLAGS="$EXTRA_CFLAGS -DRTC_LOCK";
	else
	  AC_MSG_RESULT([no]);
	fi
	 
	arch="unknown"
	AC_MSG_CHECKING(for x86-64 architecture)
	AX_COMPILE_OPTION(CONFIG_X86_64, x8664=1, x8664=0)
	AX_MSG_RESULT_YN($x8664)
	BUILD_HAMMER=no
	if test "$x8664" -eq 1; then
		arch="x86"
		BUILD_HAMMER=yes
	else
		AC_MSG_CHECKING(for x86 architecture)
		AX_COMPILE_OPTION(CONFIG_X86, x86=1, x86=0)
		AX_COMPILE_OPTION(CONFIG_X86_WP_WORKS_OK, x86=1, x86=$x86)
		AX_MSG_RESULT_YN($x86)
		test "$x86" = 1 && arch="x86"
		
		if test "$arch" = "unknown"; then
	  		AC_MSG_CHECKING(for ia64 architecture)
	  		AX_COMPILE_OPTION(CONFIG_IA64, ia64=1, ia64=0)
	  		AX_MSG_RESULT_YN($ia64)
	  		test "$ia64" = 1 && arch="ia64"
		fi
	
	fi
	AC_SUBST(BUILD_HAMMER)

	test "$arch" = "unknown" && AC_MSG_ERROR(Unsupported architecture)

	dnl check to see if kernel verion appropriate for arch
	AC_MSG_CHECKING(arch/kernel version combination)
	case "$arch" in
	ia64)
		AX_KERNEL_VERSION(2, 4, 18, <, AC_MSG_RESULT([ok]),
			AC_MSG_ERROR([unsupported arch/kernel])) ;;
	*) AC_MSG_RESULT([ok])
	esac

	dnl for now we do not support PREEMPT patch
	AC_MSG_CHECKING([for preempt patch])
	AX_COMPILE_OPTION(CONFIG_PREEMPT,preempt=1,preempt=0)
	AX_MSG_RESULT_YN([$preempt])
	test "$preempt" = 0 || AC_MSG_ERROR([unsupported kernel configuration : CONFIG_PREEMPT])

	AC_SUBST(KINC)

	MODINSTALLDIR=/lib/modules/$KVERS
fi
 
OPROFILE_MODULE_ARCH=$arch
AC_SUBST(OPROFILE_MODULE_ARCH)

AC_ARG_WITH(module-dir,
[  --with-module-dir=dir        Path to module installation directory], MODINSTALLDIR=$withval)
AC_SUBST(MODINSTALLDIR)

AC_MSG_CHECKING([whether malloc attribute is understood])
SAVE_CFLAGS=$CFLAGS
CFLAGS="-Werror $CFLAGS"
AC_TRY_COMPILE(,[
void monkey() __attribute__((malloc));
],AC_MSG_RESULT([yes]); AC_DEFINE(MALLOC_ATTRIBUTE_OK, 1, [whether malloc attribute is understood]), AC_MSG_RESULT([no]))
CFLAGS=$SAVE_CFLAGS 

dnl builtin_expect is used in module we can't add that in config.h
AC_MSG_CHECKING([whether __builtin_expect is understood])
SAVE_CFLAGS=$CFLAGS
CFLAGS="-Werror $CFLAGS"
AC_TRY_LINK(,[
int i;
if (__builtin_expect(i, 0)) { }
],AC_MSG_RESULT([yes]); EXTRA_CFLAGS="$EXTRA_CFLAGS -DEXPECT_OK", AC_MSG_RESULT([no]);)
CFLAGS=$SAVE_CFLAGS 
 
AC_SUBST(EXTRA_CFLAGS)

dnl --- user space configuration ---

# we are weak, so do not support separate build dir
topdir=`pwd`
AC_SUBST(topdir)
 
AC_ARG_WITH(extra-includes,
[  --with-extra-includes=DIR    add extra include paths],
  use_extra_includes="$withval",
  use_extra_includes=NO
)
if test -n "$use_extra_includes" && \
        test "$use_extra_includes" != "NO"; then
  ac_save_ifs=$IFS
  IFS=':'
  for dir in $use_extra_includes; do
    extra_includes="$extra_includes -I$dir"
  done
  IFS=$ac_save_ifs
  CPPFLAGS="$CPPFLAGS $extra_includes"
fi

AC_ARG_WITH(extra-libs,
[  --with-extra-libs=DIR        add extra library paths],
  use_extra_libs=$withval,
  use_extra_libs=NO
)
if test -n "$use_extra_libs" && \
        test "$use_extra_libs" != "NO"; then
   ac_save_ifs=$IFS
   IFS=':'
   for dir in $use_extra_libs; do
     extra_libraries="$extra_libraries -L$dir"
   done
   IFS=$ac_save_ifs
   LDFLAGS="$LDFLAGS $extra_libraries"
fi

AC_CHECK_LIB(popt, poptGetContext,, AC_MSG_ERROR([popt library not found]))
AC_CHECK_LIB(dl, dlopen,, AC_MSG_ERROR([dl library not found]))
AC_CHECK_LIB(iberty, cplus_demangle,, AC_MSG_ERROR([liberty library not found]))
AC_CHECK_LIB(bfd, bfd_openr,, AC_MSG_ERROR([bfd library not found]))

# C++ tests
 
AC_LANG_CPLUSPLUS

AC_MSG_CHECKING([popt prototype])
SAVE_CXXFLAGS=$CXXFLAGS
CXXFLAGS="-Werror $CXXFLAGS"
AC_TRY_COMPILE([#include <popt.h>],
[
int c; char **v;
poptGetContext(0, c, v, 0, 0);
],
AC_MSG_RESULT([takes char **]);,
AC_MSG_RESULT([takes const char **]); AC_DEFINE(CONST_POPT, 1, [whether popt prototype takes a const char **]))
CXXFLAGS="$SAVE_CXXFLAGS"

AC_MSG_CHECKING([whether to use included sstream])
AC_TRY_COMPILE([#include <sstream>], [], 
AC_MSG_RESULT([no]);,
AC_MSG_RESULT([yes]); CXXFLAGS="$CXXFLAGS -I\${top_srcdir}/include")

dnl some distro have a libiberty.a but does not have a libiberty.h
AC_CHECK_HEADERS(libiberty.h)
AC_CHECK_FUNCS(xcalloc)

dnl bfd.h pre 1998 check only for gnu 2.xx series, so gcc 3.0 can't compile it
AC_MSG_CHECKING([whether bfd defines bool])
AC_TRY_COMPILE([#include <bfd.h>], [], 
AC_MSG_RESULT([no]);,
AC_MSG_RESULT([yes]); AC_DEFINE(TRUE_FALSE_ALREADY_DEFINED, 1, [whether bfd.h defines bool values]))

AC_PATH_XTRA
SAVE_LIBS="$LIBS"
LIBS="$X_PRE_LIBS $LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
X_LIBS="$LIBS"
AC_SUBST(X_LIBS)
QT_DO_IT_ALL
LIBS="$SAVE_LIBS"

dnl enable code to describe the binary layout of libdb files, for platform portability
AC_ARG_ENABLE(abi,
	[  --enable-abi                 enable abi portability code (default is disabled)],
	enable_abi=$enableval, enable_abi=no)
if test "$enable_abi" = yes; then
	AC_DEFINE(OPROF_ABI, 1, [whether to build ABI tools])
fi
AM_CONDITIONAL(enable_abi, test "$enable_abi" = yes)

# try to find the docbook stylesheets
if test -e /usr/share/sgml/docbook/stylesheet/xsl/nwalsh/xhtml/docbook.xsl; then
	db_xsl=/usr/share/sgml/docbook/stylesheet/xsl/nwalsh/xhtml/docbook.xsl
else
	db_xsl=/usr/share/sgml/docbook/xsl-stylesheets/xhtml/docbook.xsl
fi
AC_SUBST(db_xsl)
 
# do NOT put tests here, they will fail in the case X is not installed !
 
AM_CONDITIONAL(have_qt, test -n "$QT_LIB")

# inihibited for now
AM_CONDITIONAL(build_oprof_report, false)

CFLAGS="$CFLAGS -W -Wall"
CXXFLAGS="$CXXFLAGS -W -Wall"

# enable -Werror for non-release versions.
if echo "$VERSION" | grep cvs >/dev/null; then
    CFLAGS="$CFLAGS -Werror"
    CXXFLAGS="$CXXFLAGS -Werror"
fi
 
AC_OUTPUT(Makefile \
	libutil/Makefile \
	libutil++/Makefile \
	libop/Makefile \
	libop++/Makefile \
	libopt++/Makefile \
	libdb/Makefile \
	libabi/Makefile \
	dae/Makefile \
	daemon/Makefile \
	utils/Makefile \
	doc/Makefile \
	doc/xsl/xhtml.xsl \
	doc/oprofile.1 \
	pp/Makefile \
	gui/Makefile \
	gui/ui/Makefile \
	module/Makefile \
	module/x86/Makefile \
	module/ia64/Makefile \
	version.h)

if test -z "$QT_LIB"; then
	echo "Warning: a working Qt not found; no GUI will be built"
fi
