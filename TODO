This is an (incomplete) list of some of the stuff we want to look at doing.

If you're interested in hacking on any of these, please contact the list first
for some pointers and/or read HACKING and doc/CodingStyle.

0.8 release
-----------

 o with callgraph the min count are too low. opcontrol must check callgraph is
  on (/dev/oprofile/callgraph_depth) and pass it to op_help etc. so we scale
  min count by ten (at least).
 o TRACE_END is no longer sent by the driver, keep it a bit for compatibility
 o I don't receive any SIGALRM with 2.6.1 (phe)
 o  op_help --cpu-type=9 > /dev/null generate some warning (itanium2)
 o when using callgraph and a counter number != 0 is used we receive *non
  callgraph sample* with counter == 0 so daemon abort in opd_events.c
  find_counter_event();

 o op_bfd.cpp:get_linenr() see FIXME about the use of ibfd/dbfd, needs test.
 o op_bfd.cpp and separate debuginfo file: get_symbols_from_file() symbols
  outside .text section get a wrong offset

 o callgraph_container.cpp: the inner loop in add() is very fragile!
 o We must define and choose the meaning of output
 o recursive call count are wrong. FIXME: unsure but now I think it comes from
  the way we show results, ours results are ok.
 o Test all other opstack options.
 o review opstack documentation, improve it by giving examples of output and
  how to interpret it.
 o finish opstack: various --separate= --merge= handling,
 o first quick test show it works but I got in oprofiled.log (possibly when
  shutdown oprofile)
	Read buffer of 35253 entries.
	Read buffer of 35220 entries.
	Unknown code !
  phe: look like to occur when sampling rate is a bit too high.
  (added later: the ring buffer patch to kernel driver fixed a lot of heisenbug
  in daemon, I no longer see that: we need stress test now)
 o when samples rate is too high (< 100000) a lot of cpu buffer overflow occur
  then daemon get many problems. I dunno exactly what is wrong but in this case
  a lot of samples file creation fails, many samples are lost due to no mm etc.
  we can prolly make the daemon more robust in this case.
  (added later: the ring buffer patch to kernel driver fixed a lot of heisenbug
  in daemon, I no longer see that: we need stress test now)
 o oprofiled.log now contains various statistics about lost sample etc. from
  the driver. Post profile tools must parse that and warn eventually, warning
  must include a proposed work around. User need this: if nothing seems wrong
  people are unlikely to get a look in oprofiled.log (I ran oprofile on 2.6.1
  2 weeks before noticing at 30000 I lost a lot of samples, the profile seemed
  ok du to the randomization of lost samples). As developper we need that too,
  actually we have no clear idea of the behavior on different arch, NUMA etc.
  Not perfect because if the profiler is running the oprofiled.log will show
  those warning only after the first  alarm signal, I think we must dump the
  statistics information after each opcontrol --dump to avoid that.

0.9 release
-----------

 o opdiff
 o add event aliases for common things like icache misses, we must start to 
  think about metrics including simple like event alias mapped to two or more
  events and intepreted specially by user space tools like using the ratio
  of samples; more tricky will be to select an event used as call count (no
  cg on it) and  used to emulate the call count field in gprof. I think this is
  a after 1.0 thing but event aliases must be specified in a way allowing such
  extension

Before 1.0 little stuff
-----------------------

 o do we need an opreport like opstack (showing caller/callee at binary
  boundary not symbols) ?
 o libop/op_string.c is dumb (skip_ws, skip_nonws) we can't use them
  to parse a file and report correct line number error because skip_ws skip
  \n (so op_events.c report correct line number only if there is no empty
  line in the events files)
 o document OPROFILE_EVENT_FILES_DIR
 o depedencies between profile_container.h symbol_container.h and
  sample_container.h become more and more ugly, I needed to include them
  in a specific order in some source.
 o test and fix p4 support both for 2.4/2.6, merge HT support from 2.6 to 2.4
  (if I can get a P4 HT box ...)
 o x86_64 and 2.4 kernel: it's apparently broken
 o Alpha ev67 events are broken
 o odb_insert() can fail on ftruncate or mremap() in db_manage.c but we don't
  try to recover gracefully.
 o output column shortname headers for opreport -l
 o separate debug info stuff
 o is relative_to_absolute_path guaranteeing a trailing '/' documented ?
 o create_path API is weird
 o move oprofiled.log to OP_SAMPLE_DIR/current ?
 o lib-image: and image: behavior depend on --separate=, if --separate=library
  opreport "lib-image:*libc*" --merge=lib works but not
  opreport "image:*libc*" --merge=lib whilst the behavior is reversed if
  --separate==none. Must we take care ?
 o --buffer-size is useless on 2.5 without tuning of watershed
 o pp tools must handle samples count overflow (marked as (unsigned)-1)
 o the way we show kernel modules in 2.5 is not very obvious - "/oprofile"
 o sample-file: / binary: don't work in any useful way - can we fix this
   by peeking at binary: value and faking the split_sample_file somehow ?
 o increase encapsulation but, at least for now,  not at the cost of
  getter()/setter(), this can go to Later section too.

Documentation
-------------

 o more discussion of problematic code needs to go in the "interpreting" section. 
 o document gcc 2.95 and linenr info problems especially for inline functions
 o audit oprof_start for security + then document sudo
 o finish the internals manual

General checks to make
----------------------
 
 o rgrep FIXME
 o valgrind (--show-reachable=yes --leak-check=yes)
 o audit to track unnecessary include <>
 o gcc 3.0/3.x compile
 o Qt2/3 check, no Qt check
 o verify builds (modversions, kernel versions, athlon etc.). I have the
  necessary stuff to check kernel versions/configurations on PIII core (Phil)
 o use nm and a little script to track unused function
 o test it to hell and back
 o compile all C++ programs with STL_port and test them
 o There is probably place of post profile tools where looking at errno will give better error messages.

Later
-----
 
 o we should notice an opcontrol config change (--separate etc.) and
   auto-restart the daemon if necessary (Run)
 o we can add lots more unit tests yet
 o remove 2.2 / gcc 2.91 support ?
 o Itanium event constraints are not implemented
 o side-by-side opreport output (--compare - needs UI spec) ???
 o can we log samples going to anonymous mapping by using
  - 2.6 one fake sample for all anonymous sample, cookie == 0 mean use this
  special sample file. (cookie == -1 or -2 as magic value ?)
  - 2.4 we must pass to daemon note about exec anon mapping and create one
  fake samples file by anon mapping specially named like 
  /{root}/path/to/appli/anon_mapping-0B8000-0BA0000/...
 o GUI still has a physical-counter interface, should have a general one
   like opcontrol --event
 o I think we should have the ability to have *fixed* width headers, e.g. :

vma      samples  cum. samples  %           cum. %     symbol name             image name              app name
0804c350 64582    64582         35.0757     35.0757    odb_insert              /usr/loc...in/oprofiled /usr/local/oprofile-pp/bin/oprofiled

  Note the ellipsis
 o should we make the sighup handler re-read counter config and re-start profiling too ?
 o improve --smart-demangle
	o allow user to add it's own pattern in user.pat, document it.
	o hard code ${typename} regular definition to remove all current limitations (difficult, perhaps after 1.0 ?).
 o oprof_start dialog size is too small initially
 o oprof_start key movement through events doesn't change help text
 o i18n. We need a good formatter, and also remember format_percent()
 o opannotate --source --output-dir=~moz/op/ /usr/bin/oprofiled
   will fail because the ~ is not expanded (no space around it) (popt bug I say)
 o cpu names instead of numbers in 2.4 module/ ?
 o remove 1 and 2 magic numbers for oprof_ready
 o adapt Anton's patch for handling non-symbolled libraries ?
 o use standard C integer type <stdint.h> int32_t int16_t etc.
 o opcontrol --save should allow to backup binary, see subject "features to make oprofile easier to use" on mail list
 o event multiplexing for real
 o XML output
 o profile the NMI handler code
 o merge sample files into one big report (like vtune can do repeated runs)
