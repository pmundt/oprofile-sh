This is an (incomplete) list of some of the stuff we want to look at doing.

If you're interested in hacking on any of these, please contact the list first
for some pointers and/or read HACKING and doc/CodingStyle.

Before 1.0 big stuff
--------------------

 o implement new pp spec (see specification)
	o thread profiling - kernel change in 2.5 to export task->tgid
	o per-cpu profiling
	o difference between two profile session. Difference must be made at source level. 
	   (This is a part of post-prof). Difference can be made also at symbols level. Important.
	o real call graph profiling. Do try locks in NMI handler to track backwards then
	   dump the trace in the logs + new sample file format
 o add support for samples not belonging to any symbols probably through
   artificially created symbols
 o implement --no-vmlinux
 
Before 1.0 little stuff
-----------------------

 o --smart-demangle is not documented
 o Add something  to op_help so user can see if they're using timer/rtc mode or not
 o oprof_start should use the same config file as opcontrol ...
 o opcontrol -- need a way to turn OFF a counter now after setting one up
 o oprofpp needs -P too
 o "op_time" doesn't have a header !
 o document that even with the in_interrupt trick in 2.5, you can still get a few
   samples in the wrong place - interrupt code outside of the irq_enter/exit
 o daemon/opd_image.c:opd_put_sample() if (image != NULL) { ... }
  *else verbrintf(SAMPLE LOST)* the else is missing, if log file show such
  message track the cause
 o fix the 2.5 module-finding problem as best as Rusty will let us
 o implement module-drop event in 2.5 kernel
 o fix /dev/null mappings (see sf)
 o mask SIGTERM over critical daemon operations that could corrupt sample files
 o pp tools must handle samples count overflow (marked as (unsigned)-1)
 o verify if we can remove the ELF-based symbol size code
 o must we do setrlimit(RLIMIT_NOFILE, ...) for daemon ? Isn't already limited
  by the kernel itself ?

Documentation
-------------

 o more discussion of problematic code needs to go in the "interpreting" section. 
 o document gcc 2.95 and linenr info problems especially for inline functions
 o document somewhere that oprofpp -s blah will only find the first symbol
   called "blah", or fix it
   [root@lambent oprofile]# oprofpp -kDl /usr/local/oprofile/bin/op_time  | tail -30 | grep strlen
   4207a4c0 1629     1.81701     strlen                  /lib/i686/libc-2.2.93.so
   [root@lambent oprofile]# oprofpp -kDs strlen /usr/local/oprofile/bin/op_time | grep strlen
   0000e470 0        0           strlen                  /lib/ld-2.2.93.so
 o split doc into user's manual and hacking manual, document much more 
 o audit oprof_start for security + then document sudo

General checks to make
----------------------
 
 o check chroot() processes and the path hash stuff
 o rgrep FIXME
 o valgrind (--show-reachable=yes --leak-check=yes)
 o audit to track unnecessary include <>
 o gcc 3.0/3.x compile
 o Qt2/3 check, no Qt check
 o verify builds (modversions, kernel versions, athlon etc.). I have the
  necessary stuff to check kernel versions/configurations on PIII core (Phil)
 o use nm and a little script to track unused function
 o test it to hell and back
 o compile all C++ programs with STL_port and test them
 o There is probably place of post profile tools where looking at errno will give better error messages.

Later
-----
 
 o op_to_source --source-dir=~moz/src/oprofile/ --output-dir=op /usr/bin/oprofiled
   will fail because the ~ is not expanded (no space around it) (popt bug I say)
 o remove 1 and 2 magic numbers for oprof_ready
 o adapt Anton's patch for handling non-symbolled libraries ?
 o use standard C integer type <stdint.h> int32_t int16_t etc.
 o op_session should allow to backup binary, see subject "features to make oprofile easier to use" on mail list
 o event multiplexing for real
 
o profile the NMI handler code
 
o merge sample files into one big report (like vtune can do repeated runs)

oprof_report:

IMHO this app isn't near what we really want. There's no point doing this
GUI until we can give it some real power. Let's concentrate on making the
command-line tools as good as possible first. 
- folderview of sample files + sessions in the gui itself (later ?)
- disassembly. form "+0x8b" for intra-symbol samples optionally, on by default?
- tune and test hotspot
- source (later ?)
 
